name: Build and Release
run-name: ${{ github.event.head_commit.message }}

# concurrency keyword will prevent having multiple concurrent runs of your workflow
concurrency: delivery-catalogue

env:
  DOTNET_VERSION: 6.0.x
  SOLUTION_PATH: ./*/DeliveryCatalogue.sln
  ENVIRONMENT: dev
  TEMPLATE_FILE_PATH: ./Deployment/main.bicep
  PUBLISH_DIR: ${{ github.workspace }}/publish
  ZIP_ARTIFACT_DIR: ${{ github.workspace }}/zips
  ARTIFACT_NAME: function-app

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

on:
  push:
    paths-ignore:
      - 'Deployment/GitHubOpenIdConnect/**'
      - 'Deployment/PowershellScripts/**'
    branches:
      - main
      - 'feature/*'
  pull_request:
    branches:
      - main
      - 'feature/*'

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: ~/.nuget/packages
          # An explicit key for restoring and saving the cache
          key: nuget-packages-${{ hashFiles('**/packages.lock.json') }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          restore-keys: nuget-packages-

      - name: Setup .NET v.${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: dotnet restore
        run: dotnet restore ${{ env.SOLUTION_PATH }} --locked-mode

      - name: dotnet build
        run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore

      - name: dotnet test
        run: |
          for testProject in $(find . -name '*Tests.csproj'); do
            dotnet test $testProject --no-build --no-restore --logger:"console;verbosity=detailed"
          done

      - name: dotnet publish
        run: dotnet publish ${{ env.SOLUTION_PATH }} -c Release --property:PublishDir=${{ env.PUBLISH_DIR }}

      - name: Zip artifact
        run: |
          mkdir -p ${{ env.ZIP_ARTIFACT_DIR }}
          cd ${{ env.PUBLISH_DIR }}
          zip -rX ${{ env.ZIP_ARTIFACT_DIR }}/${{ env.ARTIFACT_NAME }}.zip .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ZIP_ARTIFACT_DIR }}/${{ env.ARTIFACT_NAME }}.zip
          if-no-files-found: error
          retention-days: 90

  Release:
    runs-on: ubuntu-latest
    needs: Build
    if: success() && github.ref == 'refs/heads/main' || github.ref == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Azure Login with OpenID Connect
        uses: azure/login@v1
        with:
          # ClientId of the Azure Service principal created.
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          # TenantId of the Azure Service principal created.
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          # Azure subscriptionId
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true # used to able to authorize with powershell

      - name: Deploy Azure resources
        uses: azure/arm-deploy@v1
        id: deploy
        with:
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ${{ env.TEMPLATE_FILE_PATH }}
          # Supply deployment parameter values.
          parameters: env=${{ env.ENVIRONMENT }} azurePrincipalId=${{ secrets.AZURE_PRINCIPAL_ID }} userId=${{ secrets.AZURE_SIGNED_IN_USER_ID }} artifactName=${{ env.ARTIFACT_NAME }}
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: resourcegroup

      - name: Download built artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ZIP_ARTIFACT_DIR }}
          
      - name: Upload zipped artifact to blob storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload \
            --account-name ${{ steps.deploy.outputs.accountName }} \
            --container-name ${{ steps.deploy.outputs.containerName }} \
            --name ${{ env.ARTIFACT_NAME }} \
            --file ${{ env.ZIP_ARTIFACT_DIR }}/${{ env.ARTIFACT_NAME }}.zip \
            --auth-mode login \
            --overwrite true

      - name: Trigger syncing for Function App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az rest -m post \
            --header "Accept=application/json" \
            -u 'https://management.azure.com/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP_NAME }}/providers/Microsoft.Web/sites/${{ steps.deploy.outputs.linuxFunctionAppName }}/syncfunctiontriggers?api-version=2022-03-01'
